// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"hotsauceshop/ent/cartitems"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CartItems is the model entity for the CartItems schema.
type CartItems struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int8 `json:"quantity,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CartItemsQuery when eager-loading is set.
	Edges        CartItemsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CartItemsEdges holds the relations/edges for other nodes in the graph.
type CartItemsEdges struct {
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// Inventory holds the value of the inventory edge.
	Inventory []*Inventory `json:"inventory,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e CartItemsEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// InventoryOrErr returns the Inventory value or an error if the edge
// was not loaded in eager-loading.
func (e CartItemsEdges) InventoryOrErr() ([]*Inventory, error) {
	if e.loadedTypes[1] {
		return e.Inventory, nil
	}
	return nil, &NotLoadedError{edge: "inventory"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CartItems) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cartitems.FieldID, cartitems.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case cartitems.FieldCreatedAt, cartitems.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CartItems fields.
func (ci *CartItems) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cartitems.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ci.ID = int(value.Int64)
		case cartitems.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				ci.Quantity = int8(value.Int64)
			}
		case cartitems.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				ci.CreatedAt = value.Time
			}
		case cartitems.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				ci.UpdatedAt = new(time.Time)
				*ci.UpdatedAt = value.Time
			}
		default:
			ci.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CartItems.
// This includes values selected through modifiers, order, etc.
func (ci *CartItems) Value(name string) (ent.Value, error) {
	return ci.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the CartItems entity.
func (ci *CartItems) QueryUser() *UserQuery {
	return NewCartItemsClient(ci.config).QueryUser(ci)
}

// QueryInventory queries the "inventory" edge of the CartItems entity.
func (ci *CartItems) QueryInventory() *InventoryQuery {
	return NewCartItemsClient(ci.config).QueryInventory(ci)
}

// Update returns a builder for updating this CartItems.
// Note that you need to call CartItems.Unwrap() before calling this method if this CartItems
// was returned from a transaction, and the transaction was committed or rolled back.
func (ci *CartItems) Update() *CartItemsUpdateOne {
	return NewCartItemsClient(ci.config).UpdateOne(ci)
}

// Unwrap unwraps the CartItems entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ci *CartItems) Unwrap() *CartItems {
	_tx, ok := ci.config.driver.(*txDriver)
	if !ok {
		panic("ent: CartItems is not a transactional entity")
	}
	ci.config.driver = _tx.drv
	return ci
}

// String implements the fmt.Stringer.
func (ci *CartItems) String() string {
	var builder strings.Builder
	builder.WriteString("CartItems(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ci.ID))
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", ci.Quantity))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(ci.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ci.UpdatedAt; v != nil {
		builder.WriteString("updatedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// CartItemsSlice is a parsable slice of CartItems.
type CartItemsSlice []*CartItems
