// Code generated by ent, DO NOT EDIT.

package inventory

import (
	"hotsauceshop/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldDescription, v))
}

// ShortDescription applies equality check predicate on the "shortDescription" field. It's identical to ShortDescriptionEQ.
func ShortDescription(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldShortDescription, v))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldSlug, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float32) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldPrice, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContainsFold(FieldDescription, v))
}

// ShortDescriptionEQ applies the EQ predicate on the "shortDescription" field.
func ShortDescriptionEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldShortDescription, v))
}

// ShortDescriptionNEQ applies the NEQ predicate on the "shortDescription" field.
func ShortDescriptionNEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldShortDescription, v))
}

// ShortDescriptionIn applies the In predicate on the "shortDescription" field.
func ShortDescriptionIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldShortDescription, vs...))
}

// ShortDescriptionNotIn applies the NotIn predicate on the "shortDescription" field.
func ShortDescriptionNotIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldShortDescription, vs...))
}

// ShortDescriptionGT applies the GT predicate on the "shortDescription" field.
func ShortDescriptionGT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldShortDescription, v))
}

// ShortDescriptionGTE applies the GTE predicate on the "shortDescription" field.
func ShortDescriptionGTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldShortDescription, v))
}

// ShortDescriptionLT applies the LT predicate on the "shortDescription" field.
func ShortDescriptionLT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldShortDescription, v))
}

// ShortDescriptionLTE applies the LTE predicate on the "shortDescription" field.
func ShortDescriptionLTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldShortDescription, v))
}

// ShortDescriptionContains applies the Contains predicate on the "shortDescription" field.
func ShortDescriptionContains(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContains(FieldShortDescription, v))
}

// ShortDescriptionHasPrefix applies the HasPrefix predicate on the "shortDescription" field.
func ShortDescriptionHasPrefix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasPrefix(FieldShortDescription, v))
}

// ShortDescriptionHasSuffix applies the HasSuffix predicate on the "shortDescription" field.
func ShortDescriptionHasSuffix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasSuffix(FieldShortDescription, v))
}

// ShortDescriptionEqualFold applies the EqualFold predicate on the "shortDescription" field.
func ShortDescriptionEqualFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEqualFold(FieldShortDescription, v))
}

// ShortDescriptionContainsFold applies the ContainsFold predicate on the "shortDescription" field.
func ShortDescriptionContainsFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContainsFold(FieldShortDescription, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContainsFold(FieldSlug, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float32) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float32) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float32) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float32) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float32) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float32) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float32) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float32) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldPrice, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updatedAt" field.
func UpdatedAtIsNil() predicate.Inventory {
	return predicate.Inventory(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updatedAt" field.
func UpdatedAtNotNil() predicate.Inventory {
	return predicate.Inventory(sql.FieldNotNull(FieldUpdatedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Inventory) predicate.Inventory {
	return predicate.Inventory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Inventory) predicate.Inventory {
	return predicate.Inventory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Inventory) predicate.Inventory {
	return predicate.Inventory(sql.NotPredicates(p))
}
