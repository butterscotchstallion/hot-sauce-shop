// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hotsauceshop/ent/cartitems"
	"hotsauceshop/ent/inventory"
	"hotsauceshop/ent/predicate"
	"hotsauceshop/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CartItemsUpdate is the builder for updating CartItems entities.
type CartItemsUpdate struct {
	config
	hooks    []Hook
	mutation *CartItemsMutation
}

// Where appends a list predicates to the CartItemsUpdate builder.
func (ciu *CartItemsUpdate) Where(ps ...predicate.CartItems) *CartItemsUpdate {
	ciu.mutation.Where(ps...)
	return ciu
}

// SetQuantity sets the "quantity" field.
func (ciu *CartItemsUpdate) SetQuantity(i int8) *CartItemsUpdate {
	ciu.mutation.ResetQuantity()
	ciu.mutation.SetQuantity(i)
	return ciu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (ciu *CartItemsUpdate) SetNillableQuantity(i *int8) *CartItemsUpdate {
	if i != nil {
		ciu.SetQuantity(*i)
	}
	return ciu
}

// AddQuantity adds i to the "quantity" field.
func (ciu *CartItemsUpdate) AddQuantity(i int8) *CartItemsUpdate {
	ciu.mutation.AddQuantity(i)
	return ciu
}

// SetCreatedAt sets the "createdAt" field.
func (ciu *CartItemsUpdate) SetCreatedAt(t time.Time) *CartItemsUpdate {
	ciu.mutation.SetCreatedAt(t)
	return ciu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (ciu *CartItemsUpdate) SetNillableCreatedAt(t *time.Time) *CartItemsUpdate {
	if t != nil {
		ciu.SetCreatedAt(*t)
	}
	return ciu
}

// SetUpdatedAt sets the "updatedAt" field.
func (ciu *CartItemsUpdate) SetUpdatedAt(t time.Time) *CartItemsUpdate {
	ciu.mutation.SetUpdatedAt(t)
	return ciu
}

// ClearUpdatedAt clears the value of the "updatedAt" field.
func (ciu *CartItemsUpdate) ClearUpdatedAt() *CartItemsUpdate {
	ciu.mutation.ClearUpdatedAt()
	return ciu
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (ciu *CartItemsUpdate) AddUserIDs(ids ...int) *CartItemsUpdate {
	ciu.mutation.AddUserIDs(ids...)
	return ciu
}

// AddUser adds the "user" edges to the User entity.
func (ciu *CartItemsUpdate) AddUser(u ...*User) *CartItemsUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ciu.AddUserIDs(ids...)
}

// AddInventoryIDs adds the "inventory" edge to the Inventory entity by IDs.
func (ciu *CartItemsUpdate) AddInventoryIDs(ids ...int) *CartItemsUpdate {
	ciu.mutation.AddInventoryIDs(ids...)
	return ciu
}

// AddInventory adds the "inventory" edges to the Inventory entity.
func (ciu *CartItemsUpdate) AddInventory(i ...*Inventory) *CartItemsUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ciu.AddInventoryIDs(ids...)
}

// Mutation returns the CartItemsMutation object of the builder.
func (ciu *CartItemsUpdate) Mutation() *CartItemsMutation {
	return ciu.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (ciu *CartItemsUpdate) ClearUser() *CartItemsUpdate {
	ciu.mutation.ClearUser()
	return ciu
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (ciu *CartItemsUpdate) RemoveUserIDs(ids ...int) *CartItemsUpdate {
	ciu.mutation.RemoveUserIDs(ids...)
	return ciu
}

// RemoveUser removes "user" edges to User entities.
func (ciu *CartItemsUpdate) RemoveUser(u ...*User) *CartItemsUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ciu.RemoveUserIDs(ids...)
}

// ClearInventory clears all "inventory" edges to the Inventory entity.
func (ciu *CartItemsUpdate) ClearInventory() *CartItemsUpdate {
	ciu.mutation.ClearInventory()
	return ciu
}

// RemoveInventoryIDs removes the "inventory" edge to Inventory entities by IDs.
func (ciu *CartItemsUpdate) RemoveInventoryIDs(ids ...int) *CartItemsUpdate {
	ciu.mutation.RemoveInventoryIDs(ids...)
	return ciu
}

// RemoveInventory removes "inventory" edges to Inventory entities.
func (ciu *CartItemsUpdate) RemoveInventory(i ...*Inventory) *CartItemsUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ciu.RemoveInventoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ciu *CartItemsUpdate) Save(ctx context.Context) (int, error) {
	ciu.defaults()
	return withHooks(ctx, ciu.sqlSave, ciu.mutation, ciu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciu *CartItemsUpdate) SaveX(ctx context.Context) int {
	affected, err := ciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ciu *CartItemsUpdate) Exec(ctx context.Context) error {
	_, err := ciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciu *CartItemsUpdate) ExecX(ctx context.Context) {
	if err := ciu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ciu *CartItemsUpdate) defaults() {
	if _, ok := ciu.mutation.UpdatedAt(); !ok && !ciu.mutation.UpdatedAtCleared() {
		v := cartitems.UpdateDefaultUpdatedAt()
		ciu.mutation.SetUpdatedAt(v)
	}
}

func (ciu *CartItemsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(cartitems.Table, cartitems.Columns, sqlgraph.NewFieldSpec(cartitems.FieldID, field.TypeInt))
	if ps := ciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciu.mutation.Quantity(); ok {
		_spec.SetField(cartitems.FieldQuantity, field.TypeInt8, value)
	}
	if value, ok := ciu.mutation.AddedQuantity(); ok {
		_spec.AddField(cartitems.FieldQuantity, field.TypeInt8, value)
	}
	if value, ok := ciu.mutation.CreatedAt(); ok {
		_spec.SetField(cartitems.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ciu.mutation.UpdatedAt(); ok {
		_spec.SetField(cartitems.FieldUpdatedAt, field.TypeTime, value)
	}
	if ciu.mutation.UpdatedAtCleared() {
		_spec.ClearField(cartitems.FieldUpdatedAt, field.TypeTime)
	}
	if ciu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cartitems.UserTable,
			Columns: []string{cartitems.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.RemovedUserIDs(); len(nodes) > 0 && !ciu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cartitems.UserTable,
			Columns: []string{cartitems.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cartitems.UserTable,
			Columns: []string{cartitems.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciu.mutation.InventoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cartitems.InventoryTable,
			Columns: cartitems.InventoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.RemovedInventoryIDs(); len(nodes) > 0 && !ciu.mutation.InventoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cartitems.InventoryTable,
			Columns: cartitems.InventoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.InventoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cartitems.InventoryTable,
			Columns: cartitems.InventoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cartitems.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ciu.mutation.done = true
	return n, nil
}

// CartItemsUpdateOne is the builder for updating a single CartItems entity.
type CartItemsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CartItemsMutation
}

// SetQuantity sets the "quantity" field.
func (ciuo *CartItemsUpdateOne) SetQuantity(i int8) *CartItemsUpdateOne {
	ciuo.mutation.ResetQuantity()
	ciuo.mutation.SetQuantity(i)
	return ciuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (ciuo *CartItemsUpdateOne) SetNillableQuantity(i *int8) *CartItemsUpdateOne {
	if i != nil {
		ciuo.SetQuantity(*i)
	}
	return ciuo
}

// AddQuantity adds i to the "quantity" field.
func (ciuo *CartItemsUpdateOne) AddQuantity(i int8) *CartItemsUpdateOne {
	ciuo.mutation.AddQuantity(i)
	return ciuo
}

// SetCreatedAt sets the "createdAt" field.
func (ciuo *CartItemsUpdateOne) SetCreatedAt(t time.Time) *CartItemsUpdateOne {
	ciuo.mutation.SetCreatedAt(t)
	return ciuo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (ciuo *CartItemsUpdateOne) SetNillableCreatedAt(t *time.Time) *CartItemsUpdateOne {
	if t != nil {
		ciuo.SetCreatedAt(*t)
	}
	return ciuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (ciuo *CartItemsUpdateOne) SetUpdatedAt(t time.Time) *CartItemsUpdateOne {
	ciuo.mutation.SetUpdatedAt(t)
	return ciuo
}

// ClearUpdatedAt clears the value of the "updatedAt" field.
func (ciuo *CartItemsUpdateOne) ClearUpdatedAt() *CartItemsUpdateOne {
	ciuo.mutation.ClearUpdatedAt()
	return ciuo
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (ciuo *CartItemsUpdateOne) AddUserIDs(ids ...int) *CartItemsUpdateOne {
	ciuo.mutation.AddUserIDs(ids...)
	return ciuo
}

// AddUser adds the "user" edges to the User entity.
func (ciuo *CartItemsUpdateOne) AddUser(u ...*User) *CartItemsUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ciuo.AddUserIDs(ids...)
}

// AddInventoryIDs adds the "inventory" edge to the Inventory entity by IDs.
func (ciuo *CartItemsUpdateOne) AddInventoryIDs(ids ...int) *CartItemsUpdateOne {
	ciuo.mutation.AddInventoryIDs(ids...)
	return ciuo
}

// AddInventory adds the "inventory" edges to the Inventory entity.
func (ciuo *CartItemsUpdateOne) AddInventory(i ...*Inventory) *CartItemsUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ciuo.AddInventoryIDs(ids...)
}

// Mutation returns the CartItemsMutation object of the builder.
func (ciuo *CartItemsUpdateOne) Mutation() *CartItemsMutation {
	return ciuo.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (ciuo *CartItemsUpdateOne) ClearUser() *CartItemsUpdateOne {
	ciuo.mutation.ClearUser()
	return ciuo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (ciuo *CartItemsUpdateOne) RemoveUserIDs(ids ...int) *CartItemsUpdateOne {
	ciuo.mutation.RemoveUserIDs(ids...)
	return ciuo
}

// RemoveUser removes "user" edges to User entities.
func (ciuo *CartItemsUpdateOne) RemoveUser(u ...*User) *CartItemsUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ciuo.RemoveUserIDs(ids...)
}

// ClearInventory clears all "inventory" edges to the Inventory entity.
func (ciuo *CartItemsUpdateOne) ClearInventory() *CartItemsUpdateOne {
	ciuo.mutation.ClearInventory()
	return ciuo
}

// RemoveInventoryIDs removes the "inventory" edge to Inventory entities by IDs.
func (ciuo *CartItemsUpdateOne) RemoveInventoryIDs(ids ...int) *CartItemsUpdateOne {
	ciuo.mutation.RemoveInventoryIDs(ids...)
	return ciuo
}

// RemoveInventory removes "inventory" edges to Inventory entities.
func (ciuo *CartItemsUpdateOne) RemoveInventory(i ...*Inventory) *CartItemsUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ciuo.RemoveInventoryIDs(ids...)
}

// Where appends a list predicates to the CartItemsUpdate builder.
func (ciuo *CartItemsUpdateOne) Where(ps ...predicate.CartItems) *CartItemsUpdateOne {
	ciuo.mutation.Where(ps...)
	return ciuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ciuo *CartItemsUpdateOne) Select(field string, fields ...string) *CartItemsUpdateOne {
	ciuo.fields = append([]string{field}, fields...)
	return ciuo
}

// Save executes the query and returns the updated CartItems entity.
func (ciuo *CartItemsUpdateOne) Save(ctx context.Context) (*CartItems, error) {
	ciuo.defaults()
	return withHooks(ctx, ciuo.sqlSave, ciuo.mutation, ciuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciuo *CartItemsUpdateOne) SaveX(ctx context.Context) *CartItems {
	node, err := ciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ciuo *CartItemsUpdateOne) Exec(ctx context.Context) error {
	_, err := ciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciuo *CartItemsUpdateOne) ExecX(ctx context.Context) {
	if err := ciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ciuo *CartItemsUpdateOne) defaults() {
	if _, ok := ciuo.mutation.UpdatedAt(); !ok && !ciuo.mutation.UpdatedAtCleared() {
		v := cartitems.UpdateDefaultUpdatedAt()
		ciuo.mutation.SetUpdatedAt(v)
	}
}

func (ciuo *CartItemsUpdateOne) sqlSave(ctx context.Context) (_node *CartItems, err error) {
	_spec := sqlgraph.NewUpdateSpec(cartitems.Table, cartitems.Columns, sqlgraph.NewFieldSpec(cartitems.FieldID, field.TypeInt))
	id, ok := ciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CartItems.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cartitems.FieldID)
		for _, f := range fields {
			if !cartitems.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cartitems.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciuo.mutation.Quantity(); ok {
		_spec.SetField(cartitems.FieldQuantity, field.TypeInt8, value)
	}
	if value, ok := ciuo.mutation.AddedQuantity(); ok {
		_spec.AddField(cartitems.FieldQuantity, field.TypeInt8, value)
	}
	if value, ok := ciuo.mutation.CreatedAt(); ok {
		_spec.SetField(cartitems.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ciuo.mutation.UpdatedAt(); ok {
		_spec.SetField(cartitems.FieldUpdatedAt, field.TypeTime, value)
	}
	if ciuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(cartitems.FieldUpdatedAt, field.TypeTime)
	}
	if ciuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cartitems.UserTable,
			Columns: []string{cartitems.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.RemovedUserIDs(); len(nodes) > 0 && !ciuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cartitems.UserTable,
			Columns: []string{cartitems.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cartitems.UserTable,
			Columns: []string{cartitems.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciuo.mutation.InventoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cartitems.InventoryTable,
			Columns: cartitems.InventoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.RemovedInventoryIDs(); len(nodes) > 0 && !ciuo.mutation.InventoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cartitems.InventoryTable,
			Columns: cartitems.InventoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.InventoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cartitems.InventoryTable,
			Columns: cartitems.InventoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CartItems{config: ciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cartitems.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ciuo.mutation.done = true
	return _node, nil
}
