// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"hotsauceshop/ent/cartitems"
	"hotsauceshop/ent/inventory"
	"hotsauceshop/ent/predicate"
	"hotsauceshop/ent/user"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CartItemsQuery is the builder for querying CartItems entities.
type CartItemsQuery struct {
	config
	ctx           *QueryContext
	order         []cartitems.OrderOption
	inters        []Interceptor
	predicates    []predicate.CartItems
	withUser      *UserQuery
	withInventory *InventoryQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CartItemsQuery builder.
func (ciq *CartItemsQuery) Where(ps ...predicate.CartItems) *CartItemsQuery {
	ciq.predicates = append(ciq.predicates, ps...)
	return ciq
}

// Limit the number of records to be returned by this query.
func (ciq *CartItemsQuery) Limit(limit int) *CartItemsQuery {
	ciq.ctx.Limit = &limit
	return ciq
}

// Offset to start from.
func (ciq *CartItemsQuery) Offset(offset int) *CartItemsQuery {
	ciq.ctx.Offset = &offset
	return ciq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ciq *CartItemsQuery) Unique(unique bool) *CartItemsQuery {
	ciq.ctx.Unique = &unique
	return ciq
}

// Order specifies how the records should be ordered.
func (ciq *CartItemsQuery) Order(o ...cartitems.OrderOption) *CartItemsQuery {
	ciq.order = append(ciq.order, o...)
	return ciq
}

// QueryUser chains the current query on the "user" edge.
func (ciq *CartItemsQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: ciq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(cartitems.Table, cartitems.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cartitems.UserTable, cartitems.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(ciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInventory chains the current query on the "inventory" edge.
func (ciq *CartItemsQuery) QueryInventory() *InventoryQuery {
	query := (&InventoryClient{config: ciq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(cartitems.Table, cartitems.FieldID, selector),
			sqlgraph.To(inventory.Table, inventory.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, cartitems.InventoryTable, cartitems.InventoryPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CartItems entity from the query.
// Returns a *NotFoundError when no CartItems was found.
func (ciq *CartItemsQuery) First(ctx context.Context) (*CartItems, error) {
	nodes, err := ciq.Limit(1).All(setContextOp(ctx, ciq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{cartitems.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ciq *CartItemsQuery) FirstX(ctx context.Context) *CartItems {
	node, err := ciq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CartItems ID from the query.
// Returns a *NotFoundError when no CartItems ID was found.
func (ciq *CartItemsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ciq.Limit(1).IDs(setContextOp(ctx, ciq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{cartitems.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ciq *CartItemsQuery) FirstIDX(ctx context.Context) int {
	id, err := ciq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CartItems entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CartItems entity is found.
// Returns a *NotFoundError when no CartItems entities are found.
func (ciq *CartItemsQuery) Only(ctx context.Context) (*CartItems, error) {
	nodes, err := ciq.Limit(2).All(setContextOp(ctx, ciq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{cartitems.Label}
	default:
		return nil, &NotSingularError{cartitems.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ciq *CartItemsQuery) OnlyX(ctx context.Context) *CartItems {
	node, err := ciq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CartItems ID in the query.
// Returns a *NotSingularError when more than one CartItems ID is found.
// Returns a *NotFoundError when no entities are found.
func (ciq *CartItemsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ciq.Limit(2).IDs(setContextOp(ctx, ciq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{cartitems.Label}
	default:
		err = &NotSingularError{cartitems.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ciq *CartItemsQuery) OnlyIDX(ctx context.Context) int {
	id, err := ciq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CartItemsSlice.
func (ciq *CartItemsQuery) All(ctx context.Context) ([]*CartItems, error) {
	ctx = setContextOp(ctx, ciq.ctx, ent.OpQueryAll)
	if err := ciq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CartItems, *CartItemsQuery]()
	return withInterceptors[[]*CartItems](ctx, ciq, qr, ciq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ciq *CartItemsQuery) AllX(ctx context.Context) []*CartItems {
	nodes, err := ciq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CartItems IDs.
func (ciq *CartItemsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ciq.ctx.Unique == nil && ciq.path != nil {
		ciq.Unique(true)
	}
	ctx = setContextOp(ctx, ciq.ctx, ent.OpQueryIDs)
	if err = ciq.Select(cartitems.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ciq *CartItemsQuery) IDsX(ctx context.Context) []int {
	ids, err := ciq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ciq *CartItemsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ciq.ctx, ent.OpQueryCount)
	if err := ciq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ciq, querierCount[*CartItemsQuery](), ciq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ciq *CartItemsQuery) CountX(ctx context.Context) int {
	count, err := ciq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ciq *CartItemsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ciq.ctx, ent.OpQueryExist)
	switch _, err := ciq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ciq *CartItemsQuery) ExistX(ctx context.Context) bool {
	exist, err := ciq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CartItemsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ciq *CartItemsQuery) Clone() *CartItemsQuery {
	if ciq == nil {
		return nil
	}
	return &CartItemsQuery{
		config:        ciq.config,
		ctx:           ciq.ctx.Clone(),
		order:         append([]cartitems.OrderOption{}, ciq.order...),
		inters:        append([]Interceptor{}, ciq.inters...),
		predicates:    append([]predicate.CartItems{}, ciq.predicates...),
		withUser:      ciq.withUser.Clone(),
		withInventory: ciq.withInventory.Clone(),
		// clone intermediate query.
		sql:  ciq.sql.Clone(),
		path: ciq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (ciq *CartItemsQuery) WithUser(opts ...func(*UserQuery)) *CartItemsQuery {
	query := (&UserClient{config: ciq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ciq.withUser = query
	return ciq
}

// WithInventory tells the query-builder to eager-load the nodes that are connected to
// the "inventory" edge. The optional arguments are used to configure the query builder of the edge.
func (ciq *CartItemsQuery) WithInventory(opts ...func(*InventoryQuery)) *CartItemsQuery {
	query := (&InventoryClient{config: ciq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ciq.withInventory = query
	return ciq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Quantity int8 `json:"quantity,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CartItems.Query().
//		GroupBy(cartitems.FieldQuantity).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ciq *CartItemsQuery) GroupBy(field string, fields ...string) *CartItemsGroupBy {
	ciq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CartItemsGroupBy{build: ciq}
	grbuild.flds = &ciq.ctx.Fields
	grbuild.label = cartitems.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Quantity int8 `json:"quantity,omitempty"`
//	}
//
//	client.CartItems.Query().
//		Select(cartitems.FieldQuantity).
//		Scan(ctx, &v)
func (ciq *CartItemsQuery) Select(fields ...string) *CartItemsSelect {
	ciq.ctx.Fields = append(ciq.ctx.Fields, fields...)
	sbuild := &CartItemsSelect{CartItemsQuery: ciq}
	sbuild.label = cartitems.Label
	sbuild.flds, sbuild.scan = &ciq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CartItemsSelect configured with the given aggregations.
func (ciq *CartItemsQuery) Aggregate(fns ...AggregateFunc) *CartItemsSelect {
	return ciq.Select().Aggregate(fns...)
}

func (ciq *CartItemsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ciq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ciq); err != nil {
				return err
			}
		}
	}
	for _, f := range ciq.ctx.Fields {
		if !cartitems.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ciq.path != nil {
		prev, err := ciq.path(ctx)
		if err != nil {
			return err
		}
		ciq.sql = prev
	}
	return nil
}

func (ciq *CartItemsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CartItems, error) {
	var (
		nodes       = []*CartItems{}
		_spec       = ciq.querySpec()
		loadedTypes = [2]bool{
			ciq.withUser != nil,
			ciq.withInventory != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CartItems).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CartItems{config: ciq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ciq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ciq.withUser; query != nil {
		if err := ciq.loadUser(ctx, query, nodes,
			func(n *CartItems) { n.Edges.User = []*User{} },
			func(n *CartItems, e *User) { n.Edges.User = append(n.Edges.User, e) }); err != nil {
			return nil, err
		}
	}
	if query := ciq.withInventory; query != nil {
		if err := ciq.loadInventory(ctx, query, nodes,
			func(n *CartItems) { n.Edges.Inventory = []*Inventory{} },
			func(n *CartItems, e *Inventory) { n.Edges.Inventory = append(n.Edges.Inventory, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ciq *CartItemsQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*CartItems, init func(*CartItems), assign func(*CartItems, *User)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*CartItems)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.User(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(cartitems.UserColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.cart_items_user
		if fk == nil {
			return fmt.Errorf(`foreign-key "cart_items_user" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "cart_items_user" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ciq *CartItemsQuery) loadInventory(ctx context.Context, query *InventoryQuery, nodes []*CartItems, init func(*CartItems), assign func(*CartItems, *Inventory)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*CartItems)
	nids := make(map[int]map[*CartItems]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(cartitems.InventoryTable)
		s.Join(joinT).On(s.C(inventory.FieldID), joinT.C(cartitems.InventoryPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(cartitems.InventoryPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(cartitems.InventoryPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*CartItems]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Inventory](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "inventory" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (ciq *CartItemsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ciq.querySpec()
	_spec.Node.Columns = ciq.ctx.Fields
	if len(ciq.ctx.Fields) > 0 {
		_spec.Unique = ciq.ctx.Unique != nil && *ciq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ciq.driver, _spec)
}

func (ciq *CartItemsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(cartitems.Table, cartitems.Columns, sqlgraph.NewFieldSpec(cartitems.FieldID, field.TypeInt))
	_spec.From = ciq.sql
	if unique := ciq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ciq.path != nil {
		_spec.Unique = true
	}
	if fields := ciq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cartitems.FieldID)
		for i := range fields {
			if fields[i] != cartitems.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ciq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ciq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ciq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ciq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ciq *CartItemsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ciq.driver.Dialect())
	t1 := builder.Table(cartitems.Table)
	columns := ciq.ctx.Fields
	if len(columns) == 0 {
		columns = cartitems.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ciq.sql != nil {
		selector = ciq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ciq.ctx.Unique != nil && *ciq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ciq.predicates {
		p(selector)
	}
	for _, p := range ciq.order {
		p(selector)
	}
	if offset := ciq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ciq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CartItemsGroupBy is the group-by builder for CartItems entities.
type CartItemsGroupBy struct {
	selector
	build *CartItemsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cigb *CartItemsGroupBy) Aggregate(fns ...AggregateFunc) *CartItemsGroupBy {
	cigb.fns = append(cigb.fns, fns...)
	return cigb
}

// Scan applies the selector query and scans the result into the given value.
func (cigb *CartItemsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cigb.build.ctx, ent.OpQueryGroupBy)
	if err := cigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CartItemsQuery, *CartItemsGroupBy](ctx, cigb.build, cigb, cigb.build.inters, v)
}

func (cigb *CartItemsGroupBy) sqlScan(ctx context.Context, root *CartItemsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cigb.fns))
	for _, fn := range cigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cigb.flds)+len(cigb.fns))
		for _, f := range *cigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CartItemsSelect is the builder for selecting fields of CartItems entities.
type CartItemsSelect struct {
	*CartItemsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cis *CartItemsSelect) Aggregate(fns ...AggregateFunc) *CartItemsSelect {
	cis.fns = append(cis.fns, fns...)
	return cis
}

// Scan applies the selector query and scans the result into the given value.
func (cis *CartItemsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cis.ctx, ent.OpQuerySelect)
	if err := cis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CartItemsQuery, *CartItemsSelect](ctx, cis.CartItemsQuery, cis, cis.inters, v)
}

func (cis *CartItemsSelect) sqlScan(ctx context.Context, root *CartItemsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cis.fns))
	for _, fn := range cis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
