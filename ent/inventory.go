// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"hotsauceshop/ent/inventory"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Inventory is the model entity for the Inventory schema.
type Inventory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ShortDescription holds the value of the "shortDescription" field.
	ShortDescription string `json:"shortDescription,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Price holds the value of the "price" field.
	Price float32 `json:"price,omitempty"`
	// SpiceRating holds the value of the "spiceRating" field.
	SpiceRating int `json:"spiceRating,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InventoryQuery when eager-loading is set.
	Edges        InventoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InventoryEdges holds the relations/edges for other nodes in the graph.
type InventoryEdges struct {
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// CartItems holds the value of the cartItems edge.
	CartItems []*CartItems `json:"cartItems,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e InventoryEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// CartItemsOrErr returns the CartItems value or an error if the edge
// was not loaded in eager-loading.
func (e InventoryEdges) CartItemsOrErr() ([]*CartItems, error) {
	if e.loadedTypes[1] {
		return e.CartItems, nil
	}
	return nil, &NotLoadedError{edge: "cartItems"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Inventory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case inventory.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case inventory.FieldID, inventory.FieldSpiceRating:
			values[i] = new(sql.NullInt64)
		case inventory.FieldName, inventory.FieldDescription, inventory.FieldShortDescription, inventory.FieldSlug:
			values[i] = new(sql.NullString)
		case inventory.FieldCreatedAt, inventory.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Inventory fields.
func (i *Inventory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case inventory.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case inventory.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		case inventory.FieldDescription:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[j])
			} else if value.Valid {
				i.Description = value.String
			}
		case inventory.FieldShortDescription:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shortDescription", values[j])
			} else if value.Valid {
				i.ShortDescription = value.String
			}
		case inventory.FieldSlug:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[j])
			} else if value.Valid {
				i.Slug = value.String
			}
		case inventory.FieldPrice:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[j])
			} else if value.Valid {
				i.Price = float32(value.Float64)
			}
		case inventory.FieldSpiceRating:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field spiceRating", values[j])
			} else if value.Valid {
				i.SpiceRating = int(value.Int64)
			}
		case inventory.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case inventory.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[j])
			} else if value.Valid {
				i.UpdatedAt = new(time.Time)
				*i.UpdatedAt = value.Time
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Inventory.
// This includes values selected through modifiers, order, etc.
func (i *Inventory) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryTags queries the "tags" edge of the Inventory entity.
func (i *Inventory) QueryTags() *TagQuery {
	return NewInventoryClient(i.config).QueryTags(i)
}

// QueryCartItems queries the "cartItems" edge of the Inventory entity.
func (i *Inventory) QueryCartItems() *CartItemsQuery {
	return NewInventoryClient(i.config).QueryCartItems(i)
}

// Update returns a builder for updating this Inventory.
// Note that you need to call Inventory.Unwrap() before calling this method if this Inventory
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Inventory) Update() *InventoryUpdateOne {
	return NewInventoryClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Inventory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Inventory) Unwrap() *Inventory {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Inventory is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Inventory) String() string {
	var builder strings.Builder
	builder.WriteString("Inventory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("name=")
	builder.WriteString(i.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(i.Description)
	builder.WriteString(", ")
	builder.WriteString("shortDescription=")
	builder.WriteString(i.ShortDescription)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(i.Slug)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", i.Price))
	builder.WriteString(", ")
	builder.WriteString("spiceRating=")
	builder.WriteString(fmt.Sprintf("%v", i.SpiceRating))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := i.UpdatedAt; v != nil {
		builder.WriteString("updatedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Inventories is a parsable slice of Inventory.
type Inventories []*Inventory
